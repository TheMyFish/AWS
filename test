import json
import os

# ==============================================================================
# ÁREA DE CONFIGURAÇÃO - EDITE APENAS AQUI
# ==============================================================================
# Adicione ou remova dicionários desta lista para gerar os monitores.
#
# Parâmetros:
#   'app_name': (Obrigatório) O nome da aplicação. Será usado nas tags e nomes.
#   'env':      (Obrigatório) O ambiente (ex: "production", "staging").
#
# Parâmetros Opcionais (sobrescrevem os padrões):
#   'notification_channel': Canal para alertas (ex: "@slack-sua-equipe").
#   'latency_warning':      Threshold de warning para latência em ms.
#   'latency_critical':     Threshold crítico para latência em ms.
#   'error_rate_warning':   Threshold de warning para taxa de erro em %.
#   'error_rate_critical':  Threshold crítico para taxa de erro em %.
#   'cpu_warning':          Threshold de warning para CPU em %.
#   'cpu_critical':         Threshold crítico para CPU em %.
#   'memory_warning':       Threshold de warning para memória em %.
#   'memory_critical':      Threshold crítico para memória em %.
#
APPLICATIONS_TO_MONITOR = [
    {
        "app_name": "servico-de-pagamentos",
        "env": "production",
        "notification_channel": "@pagerduty-critical-payments",
        "latency_critical": 1000,
        "error_rate_critical": 5
    },
    {
        "app_name": "api-de-clientes",
        "env": "production",
        "notification_channel": "@slack-equipe-core"
    },
    {
        "app_name": "servico-de-notificacoes",
        "env": "staging",
        "cpu_warning": 70, # Thresholds mais baixos para staging
        "cpu_critical": 80
    },
    {
        "app_name": "frontend-webapp",
        "env": "production"
        # Este usará todos os valores padrão
    }
]
# ==============================================================================
# FIM DA ÁREA DE CONFIGURAÇÃO
# ==============================================================================


def get_monitor_definitions(config):
    """
    Cria uma lista de definições de monitores JSON com base na configuração fornecida.
    """
    app_name = config["app_name"]
    env = config["env"]
    
    # --- Valores Padrão ---
    defaults = {
        "notification_channel": "@slack-alertas-gerais",
        "latency_warning": 500,
        "latency_critical": 800,
        "error_rate_warning": 5,
        "error_rate_critical": 10,
        "cpu_warning": 80,
        "cpu_critical": 90,
        "memory_warning": 85,
        "memory_critical": 95
    }
    
    # Mescla a configuração específica com os padrões. A config do usuário tem prioridade.
    conf = {**defaults, **config}

    tags = [f"app:{app_name}", f"env:{env}", "managed_by:script"]
    message_suffix = f"Verifique a aplicação {app_name} no ambiente {env}. {conf['notification_channel']}"

    # Template base para todos os monitores
    base_monitor = {
        "tags": tags,
        "options": {
            "notify_audit": False,
            "locked": False,
            "timeout_h": 0,
            "new_host_delay": 300,
            "require_full_window": True,
            "notify_no_data": False,
            "renotify_interval": 0,
            "escalation_message": ""
        }
    }

    # Definições dos monitores
    monitors = [
        {
            **base_monitor,
            "name": f"[{app_name.upper()}] Alta Latência P95 ({env})",
            "type": "metric alert",
            "query": f"p95(last_5m):avg:trace.http.request.duration{{env:{env},service:{app_name}}} by {{host}} > {conf['latency_warning']}",
            "message": f"A latência p95 está acima de {{value}}ms. {message_suffix}",
            "options": {**base_monitor["options"], "thresholds": {"warning": conf['latency_warning'], "critical": conf['latency_critical']}}
        },
        {
            **base_monitor,
            "name": f"[{app_name.upper( )}] Alta Taxa de Erros ({env})",
            "type": "metric alert",
            "query": f"sum(last_5m):sum:trace.http.request.hits{{env:{env},service:{app_name},status_code:5*}}.as_count( ) / sum:trace.http.request.hits{{env:{env},service:{app_name}}}.as_count( ) * 100 > {conf['error_rate_warning']}",
            "message": f"A taxa de erros está em {{value}}%. {message_suffix}",
            "options": {**base_monitor["options"], "thresholds": {"warning": conf['error_rate_warning'], "critical": conf['error_rate_critical']}}
        },
        {
            **base_monitor,
            "name": f"[{app_name.upper()}] Saturação de CPU Fargate ({env})",
            "type": "metric alert",
            "query": f"avg(last_5m):avg:ecs.fargate.cpu.user{{env:{env},task_family:{app_name}}} by {{task_arn}} > {conf['cpu_warning']}",
            "message": f"A utilização de CPU está em {{value}}%. {message_suffix}",
            "options": {**base_monitor["options"], "thresholds": {"warning": conf['cpu_warning'], "critical": conf['cpu_critical']}}
        },
        {
            **base_monitor,
            "name": f"[{app_name.upper()}] Saturação de Memória ECS ({env})",
            "type": "metric alert",
            "query": f"avg(last_5m):avg:aws.ecs.memory_utilization{{env:{env},servicename:{app_name}}} by {{clustername}} > {conf['memory_warning']}",
            "message": f"A utilização de memória está em {{value}}%. {message_suffix}",
            "options": {**base_monitor["options"], "thresholds": {"warning": conf['memory_warning'], "critical": conf['memory_critical']}}
        }
    ]
    
    return monitors

def main():
    """Função principal que lê a configuração e gera os arquivos JSON."""
    print("--- Iniciando geração de JSON para monitores Datadog ---")
    
    output_dir = "monitores_json_gerados"
    os.makedirs(output_dir, exist_ok=True)
    
    if not APPLICATIONS_TO_MONITOR:
        print("AVISO: A lista 'APPLICATIONS_TO_MONITOR' está vazia. Nenhum arquivo será gerado.")
        return

    for app_config in APPLICATIONS_TO_MONITOR:
        app_name = app_config.get("app_name")
        env = app_config.get("env")

        if not app_name or not env:
            print(f"ERRO: Configuração inválida, 'app_name' e 'env' são obrigatórios. Ignorando item: {app_config}")
            continue

        print(f"Processando: {app_name} no ambiente {env}...")
        
        # Gera a lista de monitores para a aplicação atual
        all_monitors_for_app = get_monitor_definitions(app_config)
        
        # Define o nome do arquivo de saída
        output_filename = os.path.join(output_dir, f"{app_name}-{env}-monitors.json")

        # Escreve a lista de monitores no arquivo JSON
        try:
            with open(output_filename, 'w', encoding='utf-8') as f:
                json.dump(all_monitors_for_app, f, indent=4, ensure_ascii=False)
            print(f"  -> ✅ Arquivo gerado com sucesso em: {output_filename}")
        except IOError as e:
            print(f"  -> ❌ ERRO ao escrever o arquivo para {app_name}: {e}")

    print("\n--- Geração concluída! ---")

if __name__ == "__main__":
    main()
